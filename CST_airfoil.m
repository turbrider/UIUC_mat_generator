function [y] = CST_airfoil(xl,xu,wl,wu,dz_l,dz_u);

% Description : Create a set of airfoil coordinates using CST parametrization method 
% Input  : wl = CST weight of lower surface
%          wu = CST weight of upper surface
%          dz = trailing edge thickness
% Output : coord = set of x-y coordinates of airfoil generated by CST


% N1 and N2 parameters (N1 = 0.5 and N2 = 1 for airfoil shape)
N1 = 0.5;
N2 = 1;


[yl] = ClassShape(wl,xl,N1,N2,dz_l); % Call ClassShape function to determine lower surface y-coordinates
[yu] = ClassShape(wu,xu,N1,N2,dz_u);  % Call ClassShape function to determine upper surface y-coordinates
tmp = yl(1) + yu(1);
yl(1) = tmp/2;
yu(1) = tmp/2;
yl = [xl yl];
yl = sortrows(yl,1,'ascend');
yu = [xu yu];
yu = sortrows(yu,1,'descend');
y = [yu;yl]; % Combine upper and lower y coordinates


%% Function to calculate class and shape function
function [y] = ClassShape(w,x,N1,N2,dz);


% Class function; taking input of N1 and N2
for i = 1:size(x,1)
    C(i,1) = x(i)^N1*((1-x(i))^N2);
end

% Shape function; using Bernstein Polynomials
n = size(w,2)-1; % Order of Bernstein polynomials

for i = 1:n+1
     K(i) = factorial(n)/(factorial(i-1)*(factorial((n)-(i-1))));
end

for i = 1:size(x,1)
    S(i,1) = 0;
    for j = 1:n+1
        S(i,1) = S(i,1) + w(j)*K(j)*x(i)^(j-1)*((1-x(i))^(n-(j-1)));
    end
end

% Calculate y output
for i = 1:size(x,1)
   y(i,1) = C(i,1)*S(i,1) + x(i)*dz;
end

a = 2;



